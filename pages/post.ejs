<!DOCTYPE html>
<html lang="en">

<%- include('../partials/head.ejs', {page: post.content, vue: true}); %>


<body class='bg-gray-100'>
    <%- include('../partials/nav.ejs', {active: "post_" +post._id, user:loggedInUser, loggedIn}); %>
    <div id='data' class='hidden'>
        <% if(loggedIn){ %>
            <input type="hidden" id="loggedInUserID" value="<%= loggedInUser._id %>">
        <% } %>
        <input type="hidden" id="postID" value="<%= post._id %>">
    </div>
    <main class='container mx-auto px-4 mt-28 md:mt-16' id='app' v-cloak>
        <post :dont-link="true" v-if="post.content" :post="post" :logged-in-user-id="loggedInUserID"></post>
        <div class="mx-auto max-w-2xl">
            <h1 class="text-base block">Comments<!-- ({{ comments.length }}) --></h1>
            <form @submit.prevent="comment(commentInput)">
                <div> <!-- todo: instead of using required attribute, it would be cool to have the post button fade in if theres any input -->
                    <textarea required v-model="commentInput" class="appearance-none w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:shadow-outline-blue focus:border-indigo-300 focus:z-10 sm:text-sm sm:leading-5" :placeholder="`Write something ${commentWord}...`"></textarea>
                    <input type="submit" value="Post" class="px-3 py-2 rounded-md bg-indigo-500 text-white cursor-pointer mb-2">
                </div>
            </form>
            <comment v-for="comment in comments" :key="comment._id" :comment="comment" />
            <button v-if='!last' @click="loadMore()" href="/login"
                class="max-w-2xl w-full mx-auto flex items-center justify-center mb-5 py-3 border border-transparent text-base font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 md:text-lg transition duration-150 ease-in-out">
                Load more
            </button>
        </div>
    </main>
</body>
<%- include('../partials/scripts.ejs'); %>
<script src="/assets/js/love.js"></script>
<script type="module">
    import Post from "../assets/js/components/post.js";
    import Comment from "../assets/js/components/comment.js"

    var postID = document.getElementById('postID').value //TODO: is there a better way to do this? TODO: clean this the heck up
    var loggedInUserIDInput = document.getElementById('loggedInUserID')

    if (loggedInUserIDInput) var loggedInUserID = loggedInUserIDInput.value
    var app = new Vue({
        el: '#app',
        data: {
            commentWords: ['insightful', 'constructive', 'great', 'helpful'],
            commentWord: '',
            post: {
                loves: [],
                poster: {

                }
            },
            comments: [],
            page: 1,
            last: true,
            commentInput: '',
            postID,
            loggedInUserID
        },
        components: {
            Post, 
            Comment
        },
        async mounted() {
            this.commentWord = this.commentWords[Math.floor(Math.random() * this.commentWords.length)]
            var postRes = await fetch(`/api/posts/${this.postID}`)
            var postData = await postRes.json()
            this.post = postData

            this.fetchComments()
        },
        methods: {
            lovePost: async function (id) {
                love(id, (newLoves, action) => {
                    this.post.loves = newLoves
                })
            },
            loadMore: async function (){
                this.page++
                this.fetchComments(this.page, false)
            },
            comment: async function (input) {
                this.commentInput = ''
                var postres = await fetch(`/posts/${this.postID}/comment`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        content: input
                    })
                })
                var postjson = await postres.json()
                console.log(postjson)
                if (postjson.ok) {
                    this.fetchComments()
                }
                if (postjson.error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to post',
                        text: postjson.error,
                        footer: '<a href="https://github.com/jeffalo/wasteof.money/issues">Report issues</a>'
                    })
                }
            },
            fetchComments: async function (page = 1, reset = true) {
                var commentsRes = await fetch(`/api/posts/${this.postID}/comments?page=${page}`)
                var commentsData = await commentsRes.json()
                if(reset){
                    this.comments = commentsData.comments
                } else {
                    this.comments.push(...commentsData.comments)
                }
                this.last = commentsData.last
            }
        }
    })
</script>
</html>
